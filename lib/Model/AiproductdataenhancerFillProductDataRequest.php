<?php
/**
 * AiproductdataenhancerFillProductDataRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  GeminiCommerce\AiProductDataEnhancer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * aiproductdataenhancer/service.proto
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace GeminiCommerce\AiProductDataEnhancer\Model;

use \ArrayAccess;
use \GeminiCommerce\AiProductDataEnhancer\ObjectSerializer;

/**
 * AiproductdataenhancerFillProductDataRequest Class Doc Comment
 *
 * @category Class
 * @package  GeminiCommerce\AiProductDataEnhancer
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AiproductdataenhancerFillProductDataRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    protected static $withAdditionalProperties = false;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'aiproductdataenhancerFillProductDataRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'tenant_id' => 'string',
        'language_code' => '\GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerLanguageCode',
        'product_information' => '\GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerProductInformation',
        'product_data_to_fill' => 'string[]',
        'domains_to_include' => 'string[]',
        'domains_to_exclude' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'tenant_id' => null,
        'language_code' => null,
        'product_information' => null,
        'product_data_to_fill' => null,
        'domains_to_include' => null,
        'domains_to_exclude' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'tenant_id' => false,
        'language_code' => false,
        'product_information' => false,
        'product_data_to_fill' => false,
        'domains_to_include' => false,
        'domains_to_exclude' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tenant_id' => 'tenantId',
        'language_code' => 'languageCode',
        'product_information' => 'productInformation',
        'product_data_to_fill' => 'productDataToFill',
        'domains_to_include' => 'domainsToInclude',
        'domains_to_exclude' => 'domainsToExclude'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tenant_id' => 'setTenantId',
        'language_code' => 'setLanguageCode',
        'product_information' => 'setProductInformation',
        'product_data_to_fill' => 'setProductDataToFill',
        'domains_to_include' => 'setDomainsToInclude',
        'domains_to_exclude' => 'setDomainsToExclude'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tenant_id' => 'getTenantId',
        'language_code' => 'getLanguageCode',
        'product_information' => 'getProductInformation',
        'product_data_to_fill' => 'getProductDataToFill',
        'domains_to_include' => 'getDomainsToInclude',
        'domains_to_exclude' => 'getDomainsToExclude'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Associative array for storing additional properties
     *
     * @var mixed[]
     */
    protected $additionalProperties = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('tenant_id', $data ?? [], null);
        $this->setIfExists('language_code', $data ?? [], null);
        $this->setIfExists('product_information', $data ?? [], null);
        $this->setIfExists('product_data_to_fill', $data ?? [], null);
        $this->setIfExists('domains_to_include', $data ?? [], null);
        $this->setIfExists('domains_to_exclude', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tenant_id
     *
     * @return string|null
     */
    public function getTenantId()
    {
        return $this->container['tenant_id'];
    }

    /**
     * Sets tenant_id
     *
     * @param string|null $tenant_id tenant_id
     *
     * @return self
     */
    public function setTenantId($tenant_id)
    {
        if (is_null($tenant_id)) {
            throw new \InvalidArgumentException('non-nullable tenant_id cannot be null');
        }
        $this->container['tenant_id'] = $tenant_id;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return \GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerLanguageCode|null
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param \GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerLanguageCode|null $language_code language_code
     *
     * @return self
     */
    public function setLanguageCode($language_code)
    {
        if (is_null($language_code)) {
            throw new \InvalidArgumentException('non-nullable language_code cannot be null');
        }
        $this->container['language_code'] = $language_code;

        return $this;
    }

    /**
     * Gets product_information
     *
     * @return \GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerProductInformation|null
     */
    public function getProductInformation()
    {
        return $this->container['product_information'];
    }

    /**
     * Sets product_information
     *
     * @param \GeminiCommerce\AiProductDataEnhancer\Model\AiproductdataenhancerProductInformation|null $product_information product_information
     *
     * @return self
     */
    public function setProductInformation($product_information)
    {
        if (is_null($product_information)) {
            throw new \InvalidArgumentException('non-nullable product_information cannot be null');
        }
        $this->container['product_information'] = $product_information;

        return $this;
    }

    /**
     * Gets product_data_to_fill
     *
     * @return string[]|null
     */
    public function getProductDataToFill()
    {
        return $this->container['product_data_to_fill'];
    }

    /**
     * Sets product_data_to_fill
     *
     * @param string[]|null $product_data_to_fill product_data_to_fill
     *
     * @return self
     */
    public function setProductDataToFill($product_data_to_fill)
    {
        if (is_null($product_data_to_fill)) {
            throw new \InvalidArgumentException('non-nullable product_data_to_fill cannot be null');
        }
        $this->container['product_data_to_fill'] = $product_data_to_fill;

        return $this;
    }

    /**
     * Gets domains_to_include
     *
     * @return string[]|null
     */
    public function getDomainsToInclude()
    {
        return $this->container['domains_to_include'];
    }

    /**
     * Sets domains_to_include
     *
     * @param string[]|null $domains_to_include domains_to_include
     *
     * @return self
     */
    public function setDomainsToInclude($domains_to_include)
    {
        if (is_null($domains_to_include)) {
            throw new \InvalidArgumentException('non-nullable domains_to_include cannot be null');
        }
        $this->container['domains_to_include'] = $domains_to_include;

        return $this;
    }

    /**
     * Gets domains_to_exclude
     *
     * @return string[]|null
     */
    public function getDomainsToExclude()
    {
        return $this->container['domains_to_exclude'];
    }

    /**
     * Sets domains_to_exclude
     *
     * @param string[]|null $domains_to_exclude domains_to_exclude
     *
     * @return self
     */
    public function setDomainsToExclude($domains_to_exclude)
    {
        if (is_null($domains_to_exclude)) {
            throw new \InvalidArgumentException('non-nullable domains_to_exclude cannot be null');
        }
        $this->container['domains_to_exclude'] = $domains_to_exclude;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    public static function withAdditionalProperties(): bool
    {
        return self::$withAdditionalProperties;
    }


    public function setAdditionalProperty($name, $value)
    {
        throw new \InvalidArgumentException(
            sprintf(
                "This model cannot have additional properties"
            )
        );
    }

    public function getAdditionalProperty($name)
    {
        return $this->additionalProperties[$name];
    }

    public function hasAdditionalProperty($name): bool
    {
        return array_key_exists($name, $this->additionalProperties);
    }

    public function getAdditionalProperties()
    {
        return $this->additionalProperties;
    }
}


